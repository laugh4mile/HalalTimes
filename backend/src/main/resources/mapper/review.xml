<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.bigdata.model.mapper.ReviewMapper">

	<!-- ReviewController -->
	<select id="getList" parameterType="map" resultType="ReviewDto">
		select id_review, content, nickname, likeCnt, score
			case when date_format(upload_date, '%Y%m%d') = date_format(now(), '%Y%m%d')
							then date_format(upload_date, '%H:%i:%s')
							else date_format(upload_date, '%y.%m.%d')
							end upload_date,
							case when date_format(update_date, '%Y%m%d') = date_format(now(), '%Y%m%d')
							then date_format(update_date, '%H:%i:%s')
							else date_format(update_date, '%y.%m.%d')
							end update_date,
			(
				select thumb_image
				from (
					select ri.id_review_image, ri.id_review, ri.original_image, ri.modified_image, ri.thumb_image
					from review_image ri
					where r.id_review = ri.id_review
				) as temp
				limit 1
			) as thumb_image				 
		from review r join user
		using(id_user)
		where r.active = 1;
<!-- 		temp = 0  -->
<!-- 		리뷰 검색 조건? -->
<!-- 		<if test="word != null and word != ''"> -->
<!-- 			<if test="key == 'title'"> -->
<!-- 				and title like concat('%', #{word}, '%') -->
<!-- 			</if> -->
<!-- 			<if test="key != 'title'"> -->
<!-- 				and #{key} = #{word} -->
<!-- 			</if> -->
<!-- 		</if> -->
<!-- 		<if test="sortBy == 'like'"> -->
<!--             order by likeCnt desc -->
<!--         </if> -->
<!--         <if test="sortBy != 'like'"> -->
<!-- 			order by id_review desc, update_date desc -->
<!--         </if> -->
<!-- 		limit #{start}, #{spp} -->
	</select>
	
	<select id="getLikeReview" parameterType="int" resultType="ReviewDto">
		select id_review, content,
				case when date_format(upload_date, '%Y%m%d') = date_format(now(), '%Y%m%d')
				then date_format(upload_date, '%H:%i:%s')
				else date_format(upload_date, '%y.%m.%d')
				end upload_date,
				case when date_format(update_date, '%Y%m%d') = date_format(now(), '%Y%m%d')
				then date_format(update_date, '%H:%i:%s')
				else date_format(update_date, '%y.%m.%d')
				end update_date,
				likeCnt, id_user, nickname,
				(
					select modified_image
					from (
						select pp.*, (select count(*)
									from post_vote
									where pp.id_review_image = post_vote.id_review_image
						            ) as count
						from review_image pp
						where post.id_review = pp.id_review
						order by count desc
						) as temp
					limit 1
				) as thumb_image				
		from post join member using(id_user)
		where temp = 0
        order by likeCnt desc
		limit #{no},1
	</select>

	<select id="getTotalCount" parameterType="map" resultType="int">
		select count(id_user)
		from review
		<if test="word != null and word != ''">
			<if test="key == 'title'">
				where subject like concat('%', #{word}, '%')
			</if>
			<if test="key != 'title'">
				where #{key} = #{word}
			</if>
		</if>
	</select>
	
	<select id="getCount" resultType="int">
		select count(id_review)
		from review
		where active = 1
	</select>
	
	<select id="getLastReview" parameterType="string" resultType="string">
		select id_review
		from review
		where id_user = #{id_user} and active = 1
		order by update_date desc
		limit 1
	</select>
	
	<select id="getOne" parameterType="int" resultType="ReviewDto">
		select r.id_review, r.id_store,  r.content, r.score, r.upload_date, r.update_date, u.nickname
		from review r join user u
			using(id_user)
		where id_review = 1 and r.active = 1
	</select>
	
	<insert id="write" parameterType="ReviewDto">
		insert into review (content, id_user, id_store, score, upload_date, update_date)
		values (#{content}, #{id_user}, #{id_store}, #{score}, current_timestamp, current_timestamp)
	</insert>
	
	<update id="modify" parameterType="ReviewDto">
		update review
		set content = #{content}, score = #{score}, update_date = current_timestamp
		where id_review = #{id_review} and active = 1
	</update>
	
	<update id="delete" parameterType="string">
		update review
		set active = 0
		where id_review = #{id_review} and active = 1
	</update>
	
 	<select id="likeCount" parameterType="String" resultType="int">
 		select count(id_review_like)
 		from review_like
 		where id_review = #{id_review} and active = 1
 	</select>
	
	<select id="likeCheck" parameterType="map" resultType="int">
	    select count(pmLikeNo)
	    from review_like
	    where id_review=#{id_review} and id_user=#{id_user}
	</select>
	
	<select id="likeInfo" parameterType="map" resultType="ReviewLikeDto">
	    select id_review_like, id_review, id_user, active
	    from review_like
	    where id_review=#{id_review} and id_user=#{id_user}
	</select>
	
	<insert id="insertLike" parameterType="map">
		insert into review_like(id_review, id_user)
		values (#{id_review}, #{id_user})
	</insert>
	
	<update id="updateLike" parameterType="map">
		update review_like
		set active = 
			case
				when likeCheck = 1 
					then 0
				when likeCheck = 0
					then 1
		where id_review = #{id_review} and id_user = #{id_user}
	</update>
	
	<update id="like" parameterType="map">
		update review_like
		set active = 1
		where id_review = #{id_review} and id_user = #{id_user}
	</update>
	
	<update id="unlike" parameterType="map">
		update review_like
		set active = 0
		where id_review = #{id_review} and id_user = #{id_user}
	</update>
	
	<update id="likeCntUp" parameterType="String">
		update review
		set likeCnt = likeCnt + 1
		where id_review = #{id_review}
	</update>
	
	<update id="likeCntDown" parameterType="String">
		update review
		set likeCnt = likeCnt - 1
		where id_review = #{id_review}
	</update>

	
	<insert id="uploadFile" parameterType="ImgDto">
		insert into review_image (id_review, original_image, modified_image, thumb_image)
<!-- 		, PICSIZE) -->
		values(#{id_review}, #{original_image}, #{modified_image}, #{thumb_image})
<!-- 		, #{PICSIZE}) -->
	</insert>
	
	<select id="getImages" parameterType="String" resultType="ImgDto">
		select id_review_image, id_review, original_image, modified_image, thumb_image
<!-- 		PICSIZE, -->
<!-- 			date_format(upload_date, '%Y%m%d') as upload_date, -->
<!-- 			(	select count(vNo) -->
<!-- 				from post_vote -->
<!--     			where post_vote.id_review_image = post_pics.id_review_image -->
<!--    			) as voteCnt -->
		from review_image
		where id_review = #{id_review}
	</select>
	
	<select id="getImgInfo" parameterType="string" resultType="ImgDto">
		select id_review_image, id_review, original_image, modified_image, thumb_image, 
<!-- 		PICSIZE, -->
<!-- 			date_format(upload_date, '%Y%m%d') as upload_date, -->
<!-- 			(	select count(vNo) -->
<!-- 				from post_vote -->
<!--     			where post_vote.id_review_image = post_pics.id_review_image -->
<!--    			) as voteCnt -->
		from review_image
		where id_review_image = #{id_review_image}
	</select>
	
	<update id="deleteImage" parameterType="string">
		update review_image
		set active = 0
		where id_review_image = #{id_review_image}
	</update>
	
	<update id="deleteAllImage" parameterType="string">
		update review_image
		set active = 0
		where id_review = #{id_review}
	</update>
	
	<!-- PostTempController -->
	
<!-- 	<select id="getTempList" parameterType="map" resultType="ReviewDto"> -->
<!-- 		select id_review, title, content, temp,  -->
<!-- 				case when date_format(uploadDate, '%Y%m%d') = date_format(now(), '%Y%m%d') -->
<!-- 				then date_format(uploadDate, '%H:%i:%s') -->
<!-- 				else date_format(uploadDate, '%y.%m.%d') -->
<!-- 				end uploadDate, -->
<!-- 				case when date_format(modifyDate, '%Y%m%d') = date_format(now(), '%Y%m%d') -->
<!-- 				then date_format(modifyDate, '%H:%i:%s') -->
<!-- 				else date_format(modifyDate, '%y.%m.%d') -->
<!-- 				end modifyDate, -->
<!-- 				likeCnt, email, name -->
<!-- 		from post join member using(email) -->
<!-- 		where temp = 1 and email = #{email} -->
<!-- 		order by id_review desc, modifyDate desc -->
<!-- 	</select> -->
	
<!-- 	<select id="getTempCount" parameterType="string" resultType="int"> -->
<!-- 		select count(postNo) -->
<!-- 		from post -->
<!-- 		where temp = 1 and email = #{email} -->
<!-- 	</select> -->
	
<!-- 	<insert id="writeTemp" parameterType="ReviewDto"> -->
<!-- 		insert into post (title, content, email, temp) -->
<!-- 		values (#{title}, #{content}, #{email}, 1) -->
<!-- 	</insert> -->
	
<!-- 	<update id="writeTemptoDB" parameterType="ReviewDto"> -->
<!-- 		update post -->
<!-- 		set temp = 0, title = #{title}, content = #{content}, uploadDate = current_timestamp, modifyDate = current_timestamp -->
<!-- 		where postNo = #{postNo} -->
<!-- 	</update> -->
	
</mapper>
